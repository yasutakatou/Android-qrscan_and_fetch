{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","setState","target","mail","value","handleClick","mailAddress","state","window","plugins","barcodeScanner","scan","result","cancelled","alert","text","device","imei","url","split","tokens","obj","Mail","Imei","Token","body","JSON","stringify","fetch","method","headers","then","res","json","catch","error","className","type","name","onChange","this","onClick","Component","Boolean","location","hostname","match","startApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","cordova","addEventListener"],"mappings":"iNAsDeA,E,YAnDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAqBRC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAvBjC,EA0BlBC,YAAc,SAACL,GACb,IAAMM,EAAc,EAAKC,MAAMJ,KAC/BK,OAAM,QAAYC,QAAQC,eAAeC,MACvC,SAAUC,GACN,IAAIA,EAAOC,UAAU,CACnBC,MAAM,OAASF,EAAOG,KAAO,SAAWP,OAAOQ,OAAOC,KAAO,SAAWX,GACxE,IAAMY,EAAMN,EAAOG,KAAKI,MAAM,KAAK,GAC7BC,EAASR,EAAOG,KAAKI,MAAM,KAAK,GAChCE,EAAM,CAACC,KAAMhB,EAAaiB,KAAMf,OAAOQ,OAAOC,KAAMO,MAAOJ,GAE3DK,EAAOC,KAAKC,UAAUN,GAK5BO,MAAMV,EAAK,CAACW,OANG,OAMKC,QAJJ,CACd,OAAU,mBACV,eAAgB,oBAEWL,SAAOM,MAAK,SAACC,GAAD,OAAQA,EAAIC,UAAQF,KAAKjB,OAAOoB,MAAMpB,WAGrF,SAAUqB,GACNrB,MAAM,WAAaqB,OA3CzB,EAAK5B,MAAQ,CACXJ,KAAK,IAHS,E,sEAQhB,OACE,yBAAKiC,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAEE,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,SAAUC,KAAKzC,aAAcK,MAAOoC,KAAKjC,MAAMJ,QAEhF,6BACA,4BAAQsC,QAASD,KAAKnC,aAAtB,uB,GAjBQqC,aCUEC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAW,WACfC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iBC1HfhD,OAAOiD,QACTP,SAASQ,iBAAiB,eAAe,WACvCX,OACC,GAEHA,K","file":"static/js/main.01e73a74.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      mail:\"\"\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <label>\n            mail: \n            <input type=\"text\" name=\"mail\" onChange={this.handleChange} value={this.state.mail}/>\n          </label>\n          <br />\n          <button onClick={this.handleClick}>Start QR Scan</button>\n        </header>\n      </div>\n    )\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.mail]: event.target.value})\n  }\n\n  handleClick = (event) => {\n    const mailAddress = this.state.mail\n    window['cordova'].plugins.barcodeScanner.scan(\n      function (result) {\n          if(!result.cancelled){\n            alert(\"URL:\" + result.text + \" IMEI:\" + window.device.imei + \" Mail:\" + mailAddress);\n            const url = result.text.split('=')[0];\n            const tokens = result.text.split('=')[1];\n            const obj = {Mail: mailAddress, Imei: window.device.imei, Token: tokens};\n            const method = \"POST\";\n            const body = JSON.stringify(obj);\n            const headers = {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            };\n            fetch(url, {method, headers, body}).then((res)=> res.json()).then(alert).catch(alert);            \n          }\n      },\n      function (error) {\n          alert(\"error : \" + error);\n      }\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n  serviceWorker.unregister();\n}\n \nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    startApp();\n  }, false);\n} else {\n  startApp();\n}\n"],"sourceRoot":""}